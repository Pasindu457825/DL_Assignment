# -*- coding: utf-8 -*-
"""DL_Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1haMDrsQcY9oU2IMO3jvxbJZPhDTJIdFp
"""

import tensorflow as tf, sys
print("TensorFlow:", tf.__version__)
print("GPU:", tf.config.list_physical_devices('GPU'))

from google.colab import drive
drive.mount('/content/drive')

!ls "/content/drive/MyDrive/fruits_dataset"

import tensorflow as tf

IMG_SIZE = (224, 224)     # EfficientNetB0 input size
BATCH    = 32
SEED     = 1337
DATA_ROOT = "/content/drive/MyDrive/fruits_dataset"

# 80% training, 20% validation split from train folder
train_ds = tf.keras.utils.image_dataset_from_directory(
    f"{DATA_ROOT}/train",
    validation_split=0.2,
    subset="training",
    seed=SEED,
    image_size=IMG_SIZE,
    batch_size=BATCH
)
val_ds = tf.keras.utils.image_dataset_from_directory(
    f"{DATA_ROOT}/train",
    validation_split=0.2,
    subset="validation",
    seed=SEED,
    image_size=IMG_SIZE,
    batch_size=BATCH
)
test_ds = tf.keras.utils.image_dataset_from_directory(
    f"{DATA_ROOT}/test",
    image_size=IMG_SIZE,
    batch_size=BATCH,
    shuffle=False
)

class_names = train_ds.class_names
print("✅ Classes found:", class_names)

AUTOTUNE = tf.data.AUTOTUNE
train_ds = train_ds.shuffle(1024).prefetch(AUTOTUNE)
val_ds   = val_ds.prefetch(AUTOTUNE)
test_ds  = test_ds.prefetch(AUTOTUNE)

from tensorflow import keras
from tensorflow.keras import layers
import tensorflow as tf

augment = keras.Sequential([
    layers.RandomFlip("horizontal"),
    layers.RandomRotation(0.1),
    layers.RandomZoom(0.1),
])

preprocess = tf.keras.applications.efficientnet.preprocess_input

base = tf.keras.applications.EfficientNetB0(
    input_shape=(224,224,3),
    include_top=False,
    weights="imagenet"
)
base.trainable = False  # freeze backbone

inputs = layers.Input(shape=(224,224,3))
x = augment(inputs)
x = preprocess(x)
x = base(x, training=False)
x = layers.GlobalAveragePooling2D()(x)
x = layers.Dropout(0.3)(x)
outputs = layers.Dense(len(class_names), activation="softmax")(x)  # 6 classes

model = keras.Model(inputs, outputs)
model.compile(
    optimizer=keras.optimizers.Adam(1e-3),
    loss="sparse_categorical_crossentropy",
    metrics=["accuracy"]
)
model.summary()

early = keras.callbacks.EarlyStopping(patience=5, restore_best_weights=True, monitor="val_accuracy")
ckpt_warm = "/content/drive/MyDrive/fruits_effnetb0_warmup.keras"
ckpt_cb   = keras.callbacks.ModelCheckpoint(ckpt_warm, save_best_only=True, monitor="val_accuracy")

history = model.fit(
    train_ds,
    validation_data=val_ds,
    epochs=10,
    callbacks=[early, ckpt_cb],
    verbose=1
)

# unfreeze last ~30 layers for fine-tuning
base.trainable = True
for layer in base.layers[:-30]:
    layer.trainable = False

model.compile(
    optimizer=keras.optimizers.Adam(1e-4),   # lower LR for fine-tune
    loss="sparse_categorical_crossentropy",
    metrics=["accuracy"]
)

ckpt_ft_path = "/content/drive/MyDrive/fruits_effnetb0_finetune.keras"
ckpt_ft = keras.callbacks.ModelCheckpoint(ckpt_ft_path, save_best_only=True, monitor="val_accuracy")

history_ft = model.fit(
    train_ds,
    validation_data=val_ds,
    epochs=10,
    callbacks=[early, ckpt_ft],
    verbose=1
)

test_loss, test_acc = model.evaluate(test_ds, verbose=0)
print(f"✅ Test Accuracy: {test_acc*100:.2f}%")

FINAL_MODEL = "/content/drive/MyDrive/fruits_effnetb0_final.keras"
model.save(FINAL_MODEL)
print("Saved:", FINAL_MODEL)

# Optional: export to TFLite (for mobile)
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite = converter.convert()
with open("/content/drive/MyDrive/fruits_effnetb0_final.tflite", "wb") as f:
    f.write(tflite)
print("Saved TFLite.")

import numpy as np
from PIL import Image

def predict_image(path):
    img = Image.open(path).convert("RGB").resize((224,224))
    arr = np.array(img, dtype=np.float32)
    arr = tf.keras.applications.efficientnet.preprocess_input(arr)
    arr = np.expand_dims(arr, 0)
    probs = model.predict(arr, verbose=0)[0]
    idx = int(np.argmax(probs))
    return class_names[idx], float(np.max(probs))

# Example:
# predict_image("/content/drive/MyDrive/fruits_dataset/test/freshapples/<some-file>.jpg")

!ls "/content/drive/MyDrive/fruits_dataset/test/freshapples" | head -n 5

img_path = "/content/drive/MyDrive/fruits_dataset/test/freshapples/rotated_by_15_Screen Shot 2018-06-08 at 4.59.49 PM.png"

label, confidence = predict_image(img_path)
print(f"Predicted label: {label} ({confidence*100:.2f}% confidence)")

!ls -lh /content/drive/MyDrive/fruits_effnetb0_final.keras

!git config --global user.email "pasindurasanjana457825@gmail.com"
!git config --global user.name "pasindu457825"

!git clone https://github.com/pasindu457825/DL_Assignment.git

# Commented out IPython magic to ensure Python compatibility.
# %cd DL_Assignment
!git checkout -b pasindu   # creates and switches to branch "models"

!ls -lh "/content/drive/MyDrive/" | grep keras

!cp "/content/drive/MyDrive/fruits_effnetb0_final.keras" "/content/DL_Assignment/"

!ls -lh "/content/DL_Assignment" | grep keras

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/DL_Assignment

!git add fruits_effnetb0_final.keras
!git commit -m "Add trained EfficientNetB0 fruit classification model"

# Commented out IPython magic to ensure Python compatibility.
# %cd /content

!rm -rf /content/DL_Assignment
!git clone https://Pasindu457825:{token}@github.com/Pasindu457825/DL_Assignment.git /content/DL_Assignment

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/DL_Assignment

!git checkout pasindu
!cp "/content/drive/MyDrive/fruits_effnetb0_final.keras" .
!git add fruits_effnetb0_final.keras
!git commit -m "Add trained EfficientNetB0 model"
!git push origin pasindu

model.save("/content/drive/MyDrive/fruits_effnetb0_final.keras")

from google.colab import files
files.download("/content/drive/MyDrive/fruits_effnetb0_final.keras")